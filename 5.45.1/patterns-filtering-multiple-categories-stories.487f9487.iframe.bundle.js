"use strict";(self.webpackChunkcarbon_components_angular=self.webpackChunkcarbon_components_angular||[]).push([[3314],{"./src/grid/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{iK:()=>ColumnDirective,lj:()=>GridDirective,zE:()=>GridModule,vZ:()=>RowDirective});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js"),core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),common=__webpack_require__("./node_modules/@angular/common/fesm2020/common.mjs"),Subscription=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Subscription.js"),BehaviorSubject=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");let GridService=class GridService{constructor(){this.gridSubject=new BehaviorSubject.X(!1),this.cssGridEnabled=!1,this.gridObservable=this.gridSubject.asObservable()}updateGridType(enableCssGrid){this.cssGridEnabled!==enableCssGrid&&(this.cssGridEnabled=!0,this.gridSubject.next(enableCssGrid))}};GridService.ctorParameters=()=>[],GridService=(0,tslib_es6.gn)([(0,core.Injectable)()],GridService);let ColumnDirective=class ColumnDirective{constructor(gridService){this.gridService=gridService,this.class="",this.columnNumbers={},this.offsets={},this.columnHang=!1,this._columnClasses=[],this.isCssGrid=!1,this.subscription=new Subscription.w0}get columnClasses(){return this._columnClasses.join(" ")}set columnClasses(classes){this._columnClasses=classes.split(" ")}ngOnInit(){this.gridService?this.subscription=this.gridService.gridObservable.subscribe((isCssGrid=>{this.isCssGrid=isCssGrid,this.updateColumnClasses()})):this.updateColumnClasses()}ngOnChanges(){this.updateColumnClasses()}ngOnDestroy(){this.subscription.unsubscribe()}updateColumnClasses(){try{this._columnClasses=[];const columnKeys=Object.keys(this.columnNumbers);this.isCssGrid?(this._columnClasses.push("cds--css-grid-column"),this.columnHang&&this._columnClasses.push("cds--grid-column-hang"),columnKeys.forEach((key=>{"auto"===this.columnNumbers[key]?this._columnClasses.push(`cds--${key}:col-span-auto`):"object"==typeof this.columnNumbers[key]?(this.columnNumbers[key].start&&this._columnClasses.push(`cds--${key}:col-start-${this.columnNumbers[key].start}`),this.columnNumbers[key].end&&this._columnClasses.push(`cds--${key}:col-end-${this.columnNumbers[key].end}`),this.columnNumbers[key].span&&this._columnClasses.push(`cds--${key}:col-span-${this.columnNumbers[key].span}`)):this._columnClasses.push(`cds--${key}:col-span-${this.columnNumbers[key]}`)})),Object.keys(this.offsets).forEach((key=>{this._columnClasses.push(`cds--${key}:col-start${this.offsets[key]+1}`)}))):(columnKeys.length<=0&&this._columnClasses.push("cds--col"),columnKeys.forEach((key=>{"nobreak"===this.columnNumbers[key]?this._columnClasses.push(`cds--col-${key}`):this._columnClasses.push(`cds--col-${key}-${this.columnNumbers[key]}`)})),Object.keys(this.offsets).forEach((key=>{this._columnClasses.push(`cds--offset-${key}-${this.offsets[key]}`)})))}catch(err){console.error(`Malformed \`offsets\` or \`columnNumbers\`: ${err}`)}this.class&&this._columnClasses.push(this.class)}};ColumnDirective.ctorParameters=()=>[{type:GridService,decorators:[{type:core.Optional}]}],ColumnDirective.propDecorators={columnClasses:[{type:core.HostBinding,args:["class"]}],class:[{type:core.Input}],columnNumbers:[{type:core.Input}],offsets:[{type:core.Input}],columnHang:[{type:core.Input}]},ColumnDirective=(0,tslib_es6.gn)([(0,core.Directive)({selector:"[cdsCol], [ibmCol]"})],ColumnDirective);let RowDirective=class RowDirective{constructor(){this.baseClass=!0,this.condensed=!1,this.narrow=!1}};RowDirective.propDecorators={baseClass:[{type:core.HostBinding,args:["class.cds--row"]}],condensed:[{type:core.HostBinding,args:["class.cds--row--condensed"]},{type:core.Input}],narrow:[{type:core.HostBinding,args:["class.cds--row--narrow"]},{type:core.Input}]},RowDirective=(0,tslib_es6.gn)([(0,core.Directive)({selector:"[cdsRow], [ibmRow]"})],RowDirective);let GridDirective=class GridDirective{constructor(gridService){this.gridService=gridService,this.condensed=!1,this.narrow=!1,this.fullWidth=!1,this.cssGridEnabled=!1,this.isSubgrid=!1,this.subscription=new Subscription.w0}set useCssGrid(enable){this.cssGridEnabled=enable,this.gridService.updateGridType(enable)}get flexGrid(){return!this.cssGridEnabled}get flexCondensed(){return!this.cssGridEnabled&&this.condensed}get flexNarrow(){return!this.cssGridEnabled&&this.narrow}get flexFullWidth(){return!this.cssGridEnabled&&this.fullWidth}get ccsGrid(){return this.cssGridEnabled&&!this.isSubgrid}get ccsCondensed(){return this.cssGridEnabled&&!this.isSubgrid&&this.condensed}get ccsNarrow(){return this.cssGridEnabled&&!this.isSubgrid&&this.narrow}get ccsFullWidth(){return this.cssGridEnabled&&!this.isSubgrid&&this.fullWidth}get subGrid(){return this.cssGridEnabled&&this.isSubgrid}get subCondensed(){return this.cssGridEnabled&&this.isSubgrid&&this.condensed}get subNarrow(){return this.cssGridEnabled&&this.isSubgrid&&this.narrow}get subFullWidth(){return this.cssGridEnabled&&this.isSubgrid&&this.fullWidth}ngOnInit(){this.subscription=this.gridService.gridObservable.subscribe((isCssGrid=>{this.cssGridEnabled=isCssGrid}))}set cssGridChildren(list){this.cssGridEnabled&&list.forEach((grid=>{grid!==this&&(grid.isSubgrid=!0)}))}ngOnDestroy(){this.subscription.unsubscribe()}};GridDirective.ctorParameters=()=>[{type:GridService}],GridDirective.propDecorators={condensed:[{type:core.Input}],narrow:[{type:core.Input}],fullWidth:[{type:core.Input}],useCssGrid:[{type:core.Input}],flexGrid:[{type:core.HostBinding,args:["class.cds--grid"]}],flexCondensed:[{type:core.HostBinding,args:["class.cds--grid--condensed"]}],flexNarrow:[{type:core.HostBinding,args:["class.cds--grid--narrow"]}],flexFullWidth:[{type:core.HostBinding,args:["class.cds--grid--full-width"]}],ccsGrid:[{type:core.HostBinding,args:["class.cds--css-grid"]}],ccsCondensed:[{type:core.HostBinding,args:["class.cds--css-grid--condensed"]}],ccsNarrow:[{type:core.HostBinding,args:["class.cds--css-grid--narrow"]}],ccsFullWidth:[{type:core.HostBinding,args:["class.cds--css-grid--full-width"]}],subGrid:[{type:core.HostBinding,args:["class.cds--subgrid"]}],subCondensed:[{type:core.HostBinding,args:["class.cds--subgrid--condensed"]}],subNarrow:[{type:core.HostBinding,args:["class.cds--subgrid--narrow"]}],subFullWidth:[{type:core.HostBinding,args:["class.cds--subgrid--wide"]}],cssGridChildren:[{type:core.ContentChildren,args:[GridDirective,{descendants:!0}]}]},GridDirective=(0,tslib_es6.gn)([(0,core.Directive)({selector:"[cdsGrid], [ibmGrid]",providers:[{provide:GridService,deps:[[new core.Optional,new core.SkipSelf,GridService]],useFactory:parentService=>parentService||new GridService}]})],GridDirective);let GridModule=class GridModule{};GridModule=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:[ColumnDirective,GridDirective,RowDirective],exports:[ColumnDirective,GridDirective,RowDirective],providers:[GridService],imports:[common.CommonModule]})],GridModule)},"./src/structured-list/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{hu:()=>ListColumn,Bu:()=>ListHeader,wc:()=>ListRow,zn:()=>StructuredList,ic:()=>StructuredListModule});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js"),core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let ListColumn=class ListColumn{constructor(){this.skeleton=!1,this.role="cell",this.isHeaderColumn=!0,this.isBodyColumn=!0,this.nowrap=!1}};ListColumn.propDecorators={skeleton:[{type:core.Input}],role:[{type:core.HostBinding,args:["attr.role"]}],isHeaderColumn:[{type:core.HostBinding,args:["class.cds--structured-list-th"]}],isBodyColumn:[{type:core.HostBinding,args:["class.cds--structured-list-td"]}],nowrap:[{type:core.HostBinding,args:["class.cds--structured-list-content--nowrap"]},{type:core.Input}]},ListColumn=(0,tslib_es6.gn)([(0,core.Component)({selector:"cds-list-column, ibm-list-column",template:'\n\t\t<span *ngIf="skeleton"></span>\n\t\t<ng-content></ng-content>\n\t'})],ListColumn);let ListHeader=class ListHeader{constructor(){this.wrapper=!0,this.role="rowgroup",this.selection=!1,this._skeleton=!1}set skeleton(value){this._skeleton=value,this.updateChildren()}get skeleton(){return this._skeleton}ngAfterContentInit(){this.columns.forEach((column=>{column.isBodyColumn=!1,column.isHeaderColumn=!0})),this.updateChildren()}updateChildren(){this.columns&&this.columns.toArray().forEach((child=>child.skeleton=this.skeleton))}};ListHeader.propDecorators={wrapper:[{type:core.HostBinding,args:["class.cds--structured-list-thead"]}],role:[{type:core.HostBinding,args:["attr.role"]}],skeleton:[{type:core.Input}],columns:[{type:core.ContentChildren,args:[ListColumn]}]},ListHeader=(0,tslib_es6.gn)([(0,core.Component)({selector:"cds-list-header, ibm-list-header",template:'\n\t\t<div class="cds--structured-list-row cds--structured-list-row--header-row" role="row">\n\t\t\t<ng-content></ng-content>\n\t\t\t<div *ngIf="selection" class="cds--structured-list-th"></div>\n\t\t</div>\n\t'})],ListHeader);let ListRow=class ListRow{constructor(){this.selected=!1,this.change=new core.EventEmitter,this.selection=!1,this.name="list",this.wrapper=!0,this.tabindex=this.selection?"0":null,this.role="row",this.isFocused=!1}get focusClass(){return this.isFocused}ngAfterContentInit(){this.columns.forEach((column=>{column.isBodyColumn=!0,column.isHeaderColumn=!1}))}onclick(){this.selection&&this.input.nativeElement.click()}onfocus(){this.isFocused=!0}onblur(){this.isFocused=!1}onChange(event){this.change.emit(event)}};ListRow.propDecorators={focusClass:[{type:core.HostBinding,args:["class.cds--structured-list-row--focused-within"]}],selected:[{type:core.Input},{type:core.HostBinding,args:["class.cds--structured-list-row--selected"]}],label:[{type:core.Input},{type:core.HostBinding,args:["attr.aria-label"]}],value:[{type:core.Input}],change:[{type:core.Output}],wrapper:[{type:core.HostBinding,args:["class.cds--structured-list-row"]}],tabindex:[{type:core.HostBinding,args:["attr.tabindex"]}],role:[{type:core.HostBinding,args:["attr.role"]}],columns:[{type:core.ContentChildren,args:[ListColumn]}],input:[{type:core.ViewChild,args:["input"]}],onclick:[{type:core.HostListener,args:["click"]}],onfocus:[{type:core.HostListener,args:["focus"]}],onblur:[{type:core.HostListener,args:["blur"]}]},ListRow=(0,tslib_es6.gn)([(0,core.Component)({selector:"cds-list-row, ibm-list-row",template:'\n\t\t<ng-content></ng-content>\n\t\t<ng-container *ngIf="selection">\n\t\t\t<input\n\t\t\t\t#input\n\t\t\t\ttabindex="-1"\n\t\t\t\tclass="cds--structured-list-input cds--visually-hidden"\n\t\t\t\ttype="radio"\n\t\t\t\t[value]="value"\n\t\t\t\t[name]="name"\n\t\t\t\t[title]="label"\n\t\t\t\t(change)="onChange($event)"\n\t\t\t\t[checked]="selected"/>\n\t\t\t<div class="cds--structured-list-td">\n\t\t\t\t<svg cdsIcon="checkmark--filled" size="16" class="cds--structured-list-svg"></svg>\n\t\t\t</div>\n\t\t</ng-container>\n\t'})],ListRow);var fesm2020_forms=__webpack_require__("./node_modules/@angular/forms/fesm2020/forms.mjs");let StructuredList=class StructuredList{constructor(){this.selection=!1,this.flushed=!1,this.condensed=!1,this.name="structured-list-"+StructuredList.listCount++,this.selected=new core.EventEmitter,this._skeleton=!1,this.onChange=_=>{},this.onTouched=()=>{}}set skeleton(value){this._skeleton=value,this.updateChildren()}get skeleton(){return this._skeleton}ngAfterContentInit(){const setSelection=rowOrHeader=>{rowOrHeader.selection=this.selection};this.headers.forEach(setSelection),this.rows.forEach((row=>{setSelection(row),row.name=this.name,row.tabindex=this.selection?"0":null,row.change.subscribe((()=>{this.selected.emit({value:row.value,selected:row.selected,name:this.name}),this.onChange(row.value)}))})),this.updateChildren()}writeValue(value){this.rows&&this.rows.forEach((row=>{row.value===value?row.selected=!0:row.selected=!1}))}registerOnChange(fn){this.onChange=fn}registerOnTouched(fn){this.onTouched=fn}updateChildren(){this.headers&&this.headers.toArray().forEach((child=>child.skeleton=this.skeleton))}};StructuredList.listCount=0,StructuredList.propDecorators={selection:[{type:core.Input}],flushed:[{type:core.Input}],condensed:[{type:core.Input}],name:[{type:core.Input}],skeleton:[{type:core.Input}],selected:[{type:core.Output}],rows:[{type:core.ContentChildren,args:[ListRow]}],headers:[{type:core.ContentChildren,args:[ListHeader]}]},StructuredList=(0,tslib_es6.gn)([(0,core.Component)({selector:"cds-structured-list, ibm-structured-list",template:'\n\t\t<div\n\t\t\tclass="cds--structured-list"\n\t\t\trole="table"\n\t\t\t[ngClass]="{\n\t\t\t\t\'cds--structured-list--flush\': flushed,\n\t\t\t\t\'cds--structured-list--selection\': selection,\n\t\t\t\t\'cds--structured-list--condensed\': condensed,\n\t\t\t\t\'cds--skeleton\': skeleton\n\t\t\t}">\n\t\t\t<ng-content select="cds-list-header,ibm-list-header"></ng-content>\n\t\t\t<div class="cds--structured-list-tbody" role="rowgroup">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</div>\n\t\t</div>\n\t',providers:[{provide:fesm2020_forms.JU,useExisting:StructuredList,multi:!0}]})],StructuredList);var common=__webpack_require__("./node_modules/@angular/common/fesm2020/common.mjs"),icon=__webpack_require__("./src/icon/index.ts");let StructuredListModule=class StructuredListModule{};StructuredListModule=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:[StructuredList,ListRow,ListHeader,ListColumn],exports:[StructuredList,ListRow,ListHeader,ListColumn],imports:[common.CommonModule,icon.QX]})],StructuredListModule)},"./src/tag/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Vp:()=>Tag,Wh:()=>TagModule});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js"),core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let Tag=class Tag{constructor(){this.type="gray",this.size="md",this.class=""}get attrClass(){return`cds--tag cds--tag--${this.type} cds--tag--${this.size} cds--layout--size-${this.size} ${this.class}`}};Tag.propDecorators={type:[{type:core.Input}],size:[{type:core.Input}],class:[{type:core.Input}],attrClass:[{type:core.HostBinding,args:["attr.class"]}]},Tag=(0,tslib_es6.gn)([(0,core.Component)({selector:"cds-tag, ibm-tag",template:"<ng-content></ng-content>"})],Tag);let TagFilter=class TagFilter extends Tag{constructor(){super(...arguments),this.closeButtonLabel="Clear Filter",this.close=new core.EventEmitter,this.click=new core.EventEmitter}onClick(event){event.stopImmediatePropagation(),this.disabled||this.click.emit({action:"click"})}onClose(event){event.stopImmediatePropagation(),this.click.emit({action:"close"}),this.close.emit()}get attrClass(){return`cds--tag cds--tag--filter cds--tag--${this.type} cds--tag--${this.size} cds--layout--size-${this.size} ${this.class}${this.disabled?" cds--tag--disabled":""}`}get attrAriaLabel(){return`${this.title||""} ${this.closeButtonLabel}`.trim()}};TagFilter.propDecorators={closeButtonLabel:[{type:core.Input}],disabled:[{type:core.Input}],title:[{type:core.Input}],close:[{type:core.Output}],click:[{type:core.Output}],attrClass:[{type:core.HostBinding,args:["attr.class"]}],attrAriaLabel:[{type:core.HostBinding,args:["attr.aria-label"]}]},TagFilter=(0,tslib_es6.gn)([(0,core.Component)({selector:"cds-tag-filter, ibm-tag-filter",template:'\n\t\t<span\n\t\t\tclass="cds--tag__label"\n\t\t\t[attr.title]="title ? title : null"\n\t\t\t(click)="onClick($event)">\n\t\t\t<ng-content></ng-content>\n\t\t</span>\n\t\t<button\n\t\t\tclass="cds--tag__close-icon"\n\t\t\t(click)="onClose($event)"\n\t\t\t[disabled]="disabled"\n\t\t\t[title]="closeButtonLabel">\n\t\t\t<span class="cds--visually-hidden">{{closeButtonLabel}}</span>\n\t\t\t<svg cdsIcon="close" size="16"></svg>\n\t\t</button>\n\t'})],TagFilter);var common=__webpack_require__("./node_modules/@angular/common/fesm2020/common.mjs"),icon=__webpack_require__("./src/icon/index.ts");let TagModule=class TagModule{};TagModule=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:[Tag,TagFilter],exports:[Tag,TagFilter],imports:[common.CommonModule,icon.QX]})],TagModule)},"./src/patterns/filtering/multiple-categories.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{MultipleCategories:()=>MultipleCategories,__namedExportsOrder:()=>__namedExportsOrder,default:()=>multiple_categories_stories});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),table=__webpack_require__("./src/table/index.ts"),dropdown=__webpack_require__("./src/dropdown/index.ts"),structured_list=__webpack_require__("./src/structured-list/index.ts"),grid=__webpack_require__("./src/grid/index.ts"),src_radio=__webpack_require__("./src/radio/index.ts"),src_checkbox=__webpack_require__("./src/checkbox/index.ts"),src_button=__webpack_require__("./src/button/index.ts"),tag=__webpack_require__("./src/tag/index.ts"),ui_shell=__webpack_require__("./src/ui-shell/index.ts");let SampleMultiCategories=class SampleMultiCategories{constructor(){this.model=new table.G0,this.checkBoxFilters=[],this.radioFilter=null,this.dataset=[{name:"Apple",type:["Fruit"],color:"Red"},{name:"Grape",type:["Fruit"],color:"Purple"},{name:"Eggplant",type:["Fruit"],color:"Purple"},{name:"FruitVegMeat",type:["Fruit","Vegetable","Meat"],color:"White"},{name:"Lettuce",type:["Vegetable"],color:"Green"},{name:"Daikon Radish",type:["Vegetable"],color:"White"},{name:"Beef",type:["Meat"],color:"Red"}],this.radios=[{color:"Red",checked:!1},{color:"Purple",checked:!1},{color:"Green",checked:!1},{color:"White",checked:!1}],this.checkboxList=[{value:"Fruit",checked:!1},{value:"Vegetable",checked:!1},{value:"Meat",checked:!1}]}onCheckboxChange(event){event.checked?this.checkBoxFilters.push(event.source.value):this.checkBoxFilters.splice(this.checkBoxFilters.indexOf(event.source.value),1),this.applyFilters()}onRadioChange(event){this.radioFilter=event.value,this.applyFilters()}resetFilters(){this.resetCheckboxList(),this.resetRadios()}resetCheckboxList(){this.checkBoxFilters=[],this.checkboxList=this.checkboxList.map((obj=>({value:obj.value,checked:!1}))),this.applyFilters()}resetRadios(){this.radioFilter=null,this.radios=this.radios.map((obj=>({color:obj.color,checked:!1}))),this.applyFilters()}applyFilters(){this.model.data=this.dataset.filter((data=>this.checkBoxFilters.every((filter=>data.type.includes(filter)))&&(data.color===this.radioFilter||!this.radioFilter))).map((filteredData=>[new table.r8({data:filteredData.name}),new table.r8({data:"Lorem ipsum dolor sit amet, consectetur adipiscing elit."})]))}ngOnInit(){document.querySelector(".sb-show-main")?.classList.add("full-page"),this.model.header=[new table.jr({data:"Name"}),new table.jr({data:"Description"})],this.model.data=this.dataset.map((datapoint=>[new table.r8({data:datapoint.name}),new table.r8({data:"Lorem ipsum dolor sit amet, consectetur adipiscing elit."})]))}ngOnDestroy(){document.querySelector(".sb-show-main")?.classList.remove("full-page")}};SampleMultiCategories=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-sample-multi-categories",template:'\n    <div cdsGrid>\n        <div cdsRow class="header">\n            <cds-header name="Patterns">\n                <cds-hamburger></cds-hamburger>\n            </cds-header>\n        </div>\n        <div cdsRow>\n            <div cdsCol [columnNumbers]="{\'lg\': 2, \'md\': 2, \'sm\': 1}" class="multi-selection">\n                <button cdsButton (click)="resetFilters()" class="reset-button">Reset Filters</button>\n                <fieldset class="cds--fieldset">\n                    <legend class="cds--label">Radio button label</legend>\n                    <cds-radio-group\n                        aria-label="radiogroup"\n                        orientation="vertical"\n                        labelPlacement="right"\n                        [(ngModel)]="radio"\n                        (change)="onRadioChange($event)">\n                        <cds-radio *ngFor="let radio of radios"\n                            [value]="radio.color"\n                            [disabled]="radio.disabled">\n                            {{radio.color}}\n                        </cds-radio>\n                    </cds-radio-group>\n                </fieldset>\n                <fieldset class="cds--fieldset">\n                    <div cdsRow>\n                        <div cdsCol [columnNumbers]="{\'lg\': 2, \'md\': 2, \'sm\': 1}">\n                            <legend class="cds--label">Type</legend>\n                        </div>\n                        <div cdsCol [columnNumbers]="{\'lg\': 2, \'md\': 2, \'sm\': 1}">\n                            <cds-tag-filter\n                                *ngIf="checkBoxFilters.size > 0"\n                                (close)="resetCheckboxList()">\n                                {{checkBoxFilters.size}}\n                            </cds-tag-filter>\n                        </div>\n                    </div>\n                    <cds-checkbox\n                        *ngFor="let listItem of checkboxList"\n                        [hideLabel]="hideLabel"\n                        [checked]="listItem.checked"\n                        [value]="listItem.value"\n                        (change)="onCheckboxChange($event)">\n                        {{ listItem.value }}\n                    </cds-checkbox>\n                </fieldset>\n            </div>\n            <div cdsCol [columnNumbers]="{\'lg\': 10, \'md\': 10, \'sm\': 3}" class="data-table">\n                <cds-table-container>\n                    <cds-table\n                        class="data-table"\n                        [model]="model"\n                        size="lg"\n                        [showSelectionColumn]="false">\n                        <ng-content></ng-content>\n                    </cds-table>\n                </cds-table-container>\n            </div>\n        </div>\n    </div>\n    ',styles:["\n\t\t.header {\n\t\t\tmargin-bottom: 80px;\n\t\t}\n\n\t\t.reset-button {\n\t\t\tmargin-bottom: 20px;\n\t\t}\n\n\t\t.data-table {\n\t\t\twidth: 100%;\n\t\t}\n\t"]})],SampleMultiCategories);const multiple_categories_stories={title:"Pattern/Filtering",decorators:[(0,dist.moduleMetadata)({declarations:[SampleMultiCategories],imports:[table.U$,dropdown.kW,grid.zE,structured_list.ic,src_radio.dU,src_checkbox.nD,src_button.hJ,tag.Wh,ui_shell.p5]})]},MultipleCategories=(args=>({props:args,template:"\n        \x3c!--\n            app-* components are for demo purposes only.\n            You can create your own implementation by using the component source as an example.\n        --\x3e\n        <app-sample-multi-categories></app-sample-multi-categories>\n    "})).bind({});MultipleCategories.parameters={...MultipleCategories.parameters,docs:{...MultipleCategories.parameters?.docs,source:{originalSource:"args => ({\n  props: args,\n  template: `\n        \x3c!--\n            app-* components are for demo purposes only.\n            You can create your own implementation by using the component source as an example.\n        --\x3e\n        <app-sample-multi-categories></app-sample-multi-categories>\n    `\n})",...MultipleCategories.parameters?.docs?.source}}};const __namedExportsOrder=["MultipleCategories"]}}]);